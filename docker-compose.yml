version: '3.9'

# Common Django template for GeoNode and Celery services below
x-common-django:
  &default-common-django
  image: ${COMPOSE_PROJECT_NAME}/geonode:${GEONODE_BASE_IMAGE_VERSION}
  restart: unless-stopped
  env_file:
    - .env
  volumes:
    # - './src:/usr/src/{{project_name}}'
    - statics:/mnt/volumes/statics
    - geoserver-data-dir:/geoserver_data/data
    - backup-restore:/backup_restore
    - data:/data
    - tmp:/tmp
  depends_on:
    db:
      condition: service_healthy

services:

  # Our custom django application. It includes Geonode.
  django:
    << : *default-common-django
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: django4${COMPOSE_PROJECT_NAME}
    healthcheck:
      test: "curl -m 10 --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://django:8000/"
      start_period: 60s
      interval: 60s
      timeout: 10s
      retries: 2
    environment:
      - IS_CELERY=False
    entrypoint: ["/usr/src/{{project_name}}/entrypoint.sh"]
    command: "uwsgi --ini /usr/src/{{project_name}}/uwsgi.ini"

  # Celery worker that executes celery tasks created by Django.
  celery:
    << : *default-common-django
    container_name: celery4${COMPOSE_PROJECT_NAME}
    depends_on:
      django:
        condition: service_healthy
    environment:
      - IS_CELERY=True
    entrypoint: ["/usr/src/{{project_name}}/entrypoint.sh"]
    command: "celery-cmd"

  # Nginx is serving django static and media files and proxies to django and geonode
  geonode:
    image: ${COMPOSE_PROJECT_NAME}/nginx:${NGINX_BASE_IMAGE_VERSION}
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
      args:
        - BASE_IMAGE_VERSION=${NGINX_BASE_IMAGE_VERSION}
    container_name: nginx4${COMPOSE_PROJECT_NAME}
    env_file:
      - .env
    environment:
      - RESOLVER=127.0.0.11
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    volumes:
      - nginx-confd:/etc/nginx
      - nginx-certificates:/geonode-certificates
      - statics:/mnt/volumes/statics
    restart: unless-stopped

  # memcached service
  memcached:
    image: memcached:alpine
    container_name: memcached4${COMPOSE_PROJECT_NAME}
    command: memcached ${MEMCACHED_OPTIONS}
    restart: on-failure
    healthcheck:
      test: nc -z 127.0.0.1 11211
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 30s

  # Gets and installs letsencrypt certificates
  letsencrypt:
    image: ${COMPOSE_PROJECT_NAME}/letsencrypt:${LETSENCRYPT_BASE_IMAGE_VERSION}
    build:
      context: ./docker/letsencrypt
      dockerfile: Dockerfile
      args:
        - BASE_IMAGE_VERSION=${LETSENCRYPT_BASE_IMAGE_VERSION}
    container_name: letsencrypt4${COMPOSE_PROJECT_NAME}
    env_file:
      - .env
    volumes:
      - nginx-certificates:/geonode-certificates
    restart: unless-stopped

  # Geoserver backend
  geoserver:
    image: ${COMPOSE_PROJECT_NAME}/geoserver:${GEOSERVER_BASE_IMAGE_VERSION}
    build:
      context: ./docker/geoserver
      dockerfile: Dockerfile
      args:
        - BASE_IMAGE_VERSION=${GEOSERVER_BASE_IMAGE_VERSION}
    container_name: geoserver4${COMPOSE_PROJECT_NAME}
    healthcheck:
      test: "curl -m 10 --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://geoserver:8080/geoserver/ows"
      start_period: 60s
      interval: 60s
      timeout: 10s
      retries: 2
    env_file:
      - .env
    ports:
      - "8080:8080"
    volumes:
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
      - backup-restore:/backup_restore
      - data:/data
      - tmp:/tmp
    restart: unless-stopped
    depends_on:
      data-dir-conf:
        condition: service_healthy
      django:
        condition: service_healthy

  data-dir-conf:
    image: ${COMPOSE_PROJECT_NAME}/geoserver_data:${GEOSERVER_DATA_BASE_IMAGE_VERSION}
    build:
      context: ./docker/geoserver_data
      dockerfile: Dockerfile
      args:
        - BASE_IMAGE_VERSION=${GEOSERVER_DATA_BASE_IMAGE_VERSION}
    container_name: gsconf4${COMPOSE_PROJECT_NAME}
    entrypoint: sleep infinity
    volumes:
      - geoserver-data-dir:/geoserver_data/data
    restart: unless-stopped
    healthcheck:
      test: "ls -A '/geoserver_data/data' | wc -l"

  # PostGIS database.
  db:
    image: ${COMPOSE_PROJECT_NAME}/postgis:${POSTGRES_BASE_IMAGE_VERSION}
    build:
      context: ./docker/postgresql
      dockerfile: Dockerfile
      args:
        - BASE_IMAGE_VERSION=${POSTGRES_BASE_IMAGE_VERSION}
    command: postgres -c "max_connections=${POSTGRESQL_MAX_CONNECTIONS}"
    container_name: db4${COMPOSE_PROJECT_NAME}
    env_file:
      - .env
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    restart: unless-stopped
    healthcheck:
      test: "pg_isready -d postgres -U postgres"
    # uncomment to enable remote connections to postgres
    #ports:
    #  - "5432:5432"

  # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    image: rabbitmq:3-alpine
    container_name: rabbitmq4${COMPOSE_PROJECT_NAME}
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    restart: unless-stopped

volumes:
  statics:
    name: ${COMPOSE_PROJECT_NAME}-statics
  nginx-confd:
    name: ${COMPOSE_PROJECT_NAME}-nginxconfd
  nginx-certificates:
    name: ${COMPOSE_PROJECT_NAME}-nginxcerts
  geoserver-data-dir:
    name: ${COMPOSE_PROJECT_NAME}-gsdatadir
  dbdata:
    name: ${COMPOSE_PROJECT_NAME}-dbdata
  dbbackups:
    name: ${COMPOSE_PROJECT_NAME}-dbbackups
  backup-restore:
    name: ${COMPOSE_PROJECT_NAME}-backup-restore
  data:
    name: ${COMPOSE_PROJECT_NAME}-data
  tmp:
    name: ${COMPOSE_PROJECT_NAME}-tmp
  rabbitmq:
    name: ${COMPOSE_PROJECT_NAME}-rabbitmq
