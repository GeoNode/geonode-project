version: '3.9'

# Common Django template for GeoNode and Celery services below
x-common-django:
  &default-common-django
  image: django:latest
  env_file:
    - .env
  volumes:
    # - '.:/usr/src/{{project_name}}'
    - statics:/mnt/volumes/statics
    - geoserver-data-dir:/geoserver_data/data
    - backup-restore:/backup_restore
    - data:/data
    - tmp:/tmp

# Common template for service restart policy
x-common-swarm-deploy:
  &default-common-swarm-deploy
  replicas: 1
  restart_policy:
    condition: any
    delay: 0s
    max_attempts: 10
    window: 60s

services:

  # Our custom django application. It includes Geonode.
  django:
    << : *default-common-django
    deploy: *default-common-swarm-deploy
    build:
      context: ./
      dockerfile: Dockerfile
    healthcheck:
      test: "curl --fail --silent --write-out 'HTTP CODE : %{http_code}\n' --output /dev/null http://127.0.0.1:8000/"
      interval: 60s
      timeout: 10s
      retries: 1
      start_period: 60s
    environment:
      IS_CELERY: 'False'
    entrypoint: ["/usr/src/{{project_name}}/entrypoint.sh"]
    command: "uwsgi --ini /usr/src/{{project_name}}/uwsgi.ini"

  # Celery worker that executes celery tasks created by Django.
  celery:
    << : *default-common-django
    deploy: *default-common-swarm-deploy
    depends_on:
      - django
    environment:
      - IS_CELERY=True
    entrypoint: ["/usr/src/{{project_name}}/entrypoint.sh"]
    command: "celery-cmd"

  # Nginx is serving django static and media files and proxies to django and geonode
  geonode:
    deploy: *default-common-swarm-deploy
    image: geonode/nginx:3.x
    build: ./docker/nginx/
    environment:
      - HTTPS_HOST=localhost
      - HTTP_HOST=localhost
      - HTTPS_PORT=443
      - HTTP_PORT=80
      - LETSENCRYPT_MODE=disabled
      - RESOLVER=127.0.0.11
    env_file:
      - .env
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    volumes:
      - nginx-confd:/etc/nginx
      - nginx-certificates:/geonode-certificates
      - statics:/mnt/volumes/statics

  # Gets and installs letsencrypt certificates
  letsencrypt:
    deploy: *default-common-swarm-deploy
    image: geonode/letsencrypt:latest
    build: ./docker/letsencrypt/
    environment:
      - HTTPS_HOST=localhost
      - HTTP_HOST=localhost
      - ADMIN_EMAIL=admin@localhost
      - LETSENCRYPT_MODE=disabled
    env_file:
      - .env
    volumes:
      - nginx-certificates:/geonode-certificates

  # Geoserver backend
  geoserver:
    deploy: *default-common-swarm-deploy
    image: geonode/geoserver:2.20.5
    build: ./docker/geoserver/
    env_file:
      - .env
    environment:
      DOCKER_HOST_IP: "localhost"
    healthcheck:
      test: curl --fail -s http://localhost:8080/geoserver/rest/workspaces/geonode.html || exit 1
      interval: 60s
      timeout: 10s
      retries: 1
      start_period: 60s
    volumes:
      - statics:/mnt/volumes/statics
      - geoserver-data-dir:/geoserver_data/data
      - backup-restore:/backup_restore
      - data:/data
      - tmp:/tmp

  data-dir-conf:
    image: geonode/geoserver_data:2.20.5
    command: /bin/true
    volumes:
      - geoserver-data-dir:/geoserver_data/data

  # PostGIS database.
  db:
    deploy: *default-common-swarm-deploy
    # use geonode official postgis 13 image
    image: geonode/postgis:13
    command: postgres -c "max_connections=${POSTGRESQL_MAX_CONNECTIONS}"
    volumes:
      - dbdata:/var/lib/postgresql/data
      - dbbackups:/pg_backups
    env_file:
      - .env
    # uncomment to enable remote connections to postgres
    #ports:
    #  - "5432:5432"

  # Vanilla RabbitMQ service. This is needed by celery
  rabbitmq:
    deploy: *default-common-swarm-deploy
    image: rabbitmq:3.7-alpine
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    env_file:
      - .env

  jenkins:
    deploy: *default-common-swarm-deploy
    image: jenkins/jenkins:lts
    # image: istresearch/jenkins:latest
    user: jenkins
    ports:
      - '9080:9080'
      - '9443:9443'
      - '50000:50000'
    # network_mode: "host"
    volumes:
      - jenkins_data:/var/jenkins_home
      - backup-restore:/backup_restore
      - data:/data
    environment:
      - 'JENKINS_OPTS=--httpPort=${JENKINS_HTTP_PORT} --httpsPort=${JENKINS_HTTPS_PORT} --prefix=/jenkins'
    env_file:
      - .env

volumes:
  jenkins_data:
    driver: local
  statics:
    name: statics
  nginx-confd:
    name: nginxconfd
  nginx-certificates:
    name: nginxcerts
  geoserver-data-dir:
    name: gsdatadir
  dbdata:
    name: dbdata
  dbbackups:
    name: dbbackups
  backup-restore:
    name: backup-restore
  data:
    name: data
  tmp:
    name: tmp
  rabbitmq:
    name: rabbitmq
